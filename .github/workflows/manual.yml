# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true
env:
  ANDROID_NDK_VERSION: '21.3.6528147'
  ANDROID_CMAKE_VERSION: '3.10.2.4988404'
jobs:
  build_android:
    strategy:
      matrix:
        build-type: ['apk', 'libretro']
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    - name: Cache NDK
      id: ndk-cache
      uses: actions/cache@v2
      with:
        path: /usr/local/lib/android/sdk/ndk
        key: ${{ runner.os }}-NdkCache-${{ env.ANDROID_NDK_VERSION }}
    - name: Install Android SDK dependencies
      run: |
        echo y | sdkmanager "ndk;${{ env.ANDROID_NDK_VERSION }}"
        echo y | sdkmanager "cmake;${{ env.ANDROID_CMAKE_VERSION }}"
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
        fetch-depth: 0
    - name: Force Fetch Git Tags
      run: git fetch --tags --force
    - name: Set SHORT_HASH
      run: echo "::set-output name=VALUE::${LONG_HASH:0:8}"
      id: short_hash
      env:
        LONG_HASH: ${{ github.sha }}
    - name: Build APKs
      if: ${{ matrix.build-type == 'apk' }}
      run: |
        cd build_android
        ./gradlew
        ./gradlew assembleRelease
    - name: Build libretro Core
      if: ${{ matrix.build-type == 'libretro' }}
      run: |
        CMAKE_PATH=${ANDROID_SDK_ROOT}/cmake/${{ env.ANDROID_CMAKE_VERSION }}
        export PATH=${CMAKE_PATH}/bin:$PATH
        export NINJA_EXE=${CMAKE_PATH}/bin/ninja
        export ANDROID_NDK=${ANDROID_SDK_ROOT}/ndk/${{ env.ANDROID_NDK_VERSION }}
        export ANDROID_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake
        cd build_retro
        ./android_build.sh
    - name: Prepare Unsigned APKs for Distribution
      if: ${{ matrix.build-type == 'apk'}}
      run: |
        export ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/29.0.3
        cp build_android/build/outputs/apk/release/Play-release-unsigned.apk .
        cp Play-release-unsigned.apk Play-release.apk
        $ANDROID_BUILD_TOOLS/zipalign -c -v 4 Play-release-unsigned.apk
    - name: Prepare Signed APKs for Distribution
      if: ${{ matrix.build-type == 'apk'  && env.ANDROID_KEYSTORE_PASS != null}}
      run: |
        export ANDROID_BUILD_TOOLS=$ANDROID_HOME/build-tools/29.0.3
        $ANDROID_BUILD_TOOLS/apksigner sign --ks installer_android/deploy.keystore --ks-key-alias deploy --ks-pass env:ANDROID_KEYSTORE_PASS --key-pass env:ANDROID_KEYSTORE_PASS Play-release.apk
        $ANDROID_BUILD_TOOLS/zipalign -c -v 4 Play-release.apk
      env:
        ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
    - name: Upload a Build Artifact Android APK Signed
      if: ${{ matrix.build-type == 'apk' && env.AWS_ACCESS_KEY_ID != null}}
      uses: actions/upload-artifact@v2
      with:
        name: Play_Android_Signed
        path: Play-release.apk
    - name: Upload a Build Artifact Android APK Unsigned
      if: ${{ matrix.build-type == 'apk' }}
      uses: actions/upload-artifact@v2
      with:
        name: Play_Android_APK_Unsigned
        path: Play-release-unsigned.apk
      env:
        SHORT_HASH: ${{ steps.short_hash.outputs.VALUE }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'us-east-2'
